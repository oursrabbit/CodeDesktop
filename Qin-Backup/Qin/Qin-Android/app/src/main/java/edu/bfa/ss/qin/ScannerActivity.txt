package edu.bfa.ss.qin;

import androidx.appcompat.app.AppCompatActivity;

import android.app.AlertDialog;
import android.bluetooth.BluetoothManager;
import android.bluetooth.le.BluetoothLeScanner;
import android.bluetooth.le.ScanCallback;
import android.bluetooth.le.ScanFilter;
import android.bluetooth.le.ScanResult;
import android.bluetooth.le.ScanSettings;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import org.json.JSONObject;

import java.io.DataOutputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import javax.net.ssl.HttpsURLConnection;

import edu.bfa.ss.qin.Util.ApplicationHelper;

public class ScannerActivity extends AppCompatActivity {
    private CountDownTimer timer;
    private BluetoothLeScanner leScanner;
    private HashMap<String, BFASSBeacon> bfassBeaconHashMap;

    private ListView bfassBeaconListView;
    private TextView infoLabel;

    private BFASSBeacon checkBeacon = null;

    private int countTime = 30;
    private int countTimeRemind = 32000;

    private String LeancloudAppid = "YHwFdAE1qj1OcWfJ5xoayLKr-gzGzoHsz";
    private String LeancloudAppKey = "UbnM6uOP2mxah3nFMzurEDQL";
    private String LeancloudAPIBaseURL = "https://yhwfdae1.lc-cn-n1-shared.com";
    private String LeancloudIDHeader = "X-LC-Id";
    private String LeancloudKeyHeader = "X-LC-Key";
    private String HttpContentTypeHeader = "Content-Type";
    private String HttpContentType = "application/json";

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK)
            return false;
        return super.onKeyDown(keyCode, event);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scanner);

        infoLabel = findViewById(R.id.S_counddownlabel);
        bfassBeaconListView = findViewById(R.id.S_ibeaconlist);
        bfassBeaconListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                checkBeacon = (BFASSBeacon) bfassBeaconListView.getItemAtPosition(position);
                bfassBeaconListView.setEnabled(false);
                waitingDialog.show();
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        updateDB();
                    }
                }).start();
            }
        });

        countDown();
        if(StaticData.StudentID.equals("01050305")) {
            bfassBeaconHashMap = new HashMap<String, BFASSBeacon>();
            for (int i = 0; i < 30; i ++) {
                BFASSBeacon newBeacon = new BFASSBeacon();
                newBeacon.LastAdvertisingTime = new Date(2099,1,1);
                newBeacon.Building = (new Random(i)).nextInt(600);
                newBeacon.Room = (new Random(i)).nextInt(600);
                newBeacon.Extra = (new Random(i)).nextInt(600);
                bfassBeaconHashMap.put(newBeacon.Building + newBeacon.Room + "", newBeacon);
            }
        }

        new Thread(new Runnable() {
                @Override
                public void run() {
                    setupNFCScanner();
                }
            }).start();
    }

    private void updateDB() {
        String url = LeancloudAPIBaseURL + "/1.1/classes/CheckRecording";
        try {
            HttpsURLConnection connection = (HttpsURLConnection) (new URL(url)).openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty(LeancloudIDHeader, LeancloudAppid);
            connection.setRequestProperty(LeancloudKeyHeader, LeancloudAppKey);
            connection.setRequestProperty(HttpContentTypeHeader, HttpContentType);
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setRequestProperty("Content-Type", "application/json");
            JSONObject jsonParam = new JSONObject();
            jsonParam.put("StudentID", StaticData.StudentID);
            jsonParam.put("RoomID", checkBeacon.Building + checkBeacon.Room + "");
            DataOutputStream os = new DataOutputStream(connection.getOutputStream());
            os.writeBytes(jsonParam.toString());
            os.flush();
            os.close();
            if (connection.getResponseCode() == 201) {
                infoLabel.post(new Runnable() {
                    @Override
                    public void run() {
                        waitingDialog.hide();
                        cleanupNFCScanner();
                        AlertDialog.Builder builder = new AlertDialog.Builder(ScannerActivity.this);
                        builder.setMessage("签到成功")
                                .setPositiveButton("重新签到", new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {
                                        Intent intent = new Intent();
                                        intent.setClass(ScannerActivity.this, FaceDetectActivity.class);
                                        startActivity(intent);
                                    }
                                });
                        AlertDialog dialog = builder.create();
                        dialog.setCanceledOnTouchOutside(false);
                        dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
                            @Override
                            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                                return keyCode == KeyEvent.KEYCODE_BACK;
                            }
                        });
                        dialog.show();
                    }
                });
            } else {
                bfassBeaconListView.post(new Runnable() {
                    @Override
                    public void run() {
                        waitingDialog.hide();
                        bfassBeaconListView.setEnabled(true);
                    }
                });
                Toast.makeText(this, "签到失败，请重新签到", Toast.LENGTH_LONG).show();
                return;
            }
        } catch (Exception e) {
            bfassBeaconListView.post(new Runnable() {
                @Override
                public void run() {
                    waitingDialog.hide();
                    bfassBeaconListView.setEnabled(true);
                }
            });
            Toast.makeText(this, "系统错误，请重新签到", Toast.LENGTH_LONG).show();
            e.printStackTrace();
        }
    }

    private void countDown() {
        timer = new CountDownTimer(countTimeRemind, 1000) {
            @Override
            public void onTick(long millisUntilFinished) {
                infoLabel.post(new Runnable() {
                    @Override
                    public void run() {
                        countTime = countTime - 1;
                        if (countTime <= 0)
                            infoLabel.setText("0");
                        else
                            infoLabel.setText(countTime + "");

                        List<String> removeKeys = new ArrayList<String>();
                        for (BFASSBeacon bb : bfassBeaconHashMap.values()) {
                            if ((((new Date()).getTime()) - (bb.LastAdvertisingTime.getTime())) > 10 * 1000) {
                                removeKeys.add(bb.Building + bb.Room + "");
                            }
                        }
                        for (String rk : removeKeys) {
                            bfassBeaconHashMap.remove(rk);
                        }
                        bfassBeaconListView.post(new Runnable() {
                            @Override
                            public void run() {
                                BFASSBeaconAdapter adapter = new BFASSBeaconAdapter(ScannerActivity.this, R.layout.table_scanner_item, new ArrayList<BFASSBeacon>(bfassBeaconHashMap.values()));
                                bfassBeaconListView.setAdapter(adapter);
                            }
                        });
                    }
                });
            }

            @Override
            public void onFinish() {
                infoLabel.post(new Runnable() {
                    @Override
                    public void run() {
                        cleanupNFCScanner();
                        AlertDialog.Builder builder = new AlertDialog.Builder(ScannerActivity.this);
                        builder.setMessage("签到失败")
                                .setPositiveButton("重新签到", new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int id) {
                                        Intent intent = new Intent();
                                        intent.setClass(ScannerActivity.this, FaceDetectActivity.class);
                                        startActivity(intent);
                                    }
                                });
                        builder.show();
                    }
                });
            }
        };
        timer.start();
    }

    private void cleanupNFCScanner() {
        infoLabel.setText("0");
        if (timer != null)
            timer.cancel();
        timer = null;
        if (leScanner != null)
            leScanner.stopScan(myScanCallback);
        leScanner = null;
    }

    private void setupNFCScanner() {
        bfassBeaconHashMap = new HashMap<String, BFASSBeacon>();
        leScanner = ((BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE)).getAdapter().getBluetoothLeScanner();

        ScanSettings.Builder builder = new ScanSettings.Builder();
        builder.setCallbackType(ScanSettings.CALLBACK_TYPE_ALL_MATCHES);
        builder.setMatchMode(ScanSettings.MATCH_MODE_AGGRESSIVE);
        builder.setNumOfMatches(ScanSettings.MATCH_NUM_MAX_ADVERTISEMENT);
        builder.setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY);
        ScanSettings scanSettings = builder.build();

        List<ScanFilter> filters = new ArrayList<ScanFilter>();
        ScanFilter.Builder filterBuilder = new ScanFilter.Builder();
        filterBuilder.setManufacturerData(0x0501, new byte[]{
                0x03, 0x0C,
                0x00, 0x00,0x00, 0x00,
                0x00, 0x00,0x00, 0x00,
                0x00, 0x00,0x00, 0x00,
        }, new byte[]{
                1, 1,
                0, 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0
        });
        filterBuilder.setDeviceName("BFASS");
        //filters.add(filterBuilder.build());

        leScanner.startScan(filters, scanSettings, myScanCallback);
    }

    private ScanCallback myScanCallback = new ScanCallback() {
        @Override
        public void onScanResult(int callbackType, ScanResult result) {
            byte[] beaconRawData = result.getScanRecord().getManufacturerSpecificData(0x0502);
            /*BFASSBeacon beacon = BFASSBeacon.Creater(beaconRawData);
            //Update Local iBaeacon List: bfassBeaconHashMap
            if (bfassBeaconHashMap.containsKey(beacon.Building + beacon.Room + "")) {
                bfassBeaconHashMap.get(beacon.Building + beacon.Room + "").LastAdvertisingTime = new Date();
            } else {
                bfassBeaconHashMap.put(beacon.Building + beacon.Room + "", beacon);
            }*/

            super.onScanResult(callbackType, result);
        }
    };
}

class BFASSBeacon {
    public String DeviceName;
    public int Building;
    public int Room;
    public int Extra;

    public Date LastAdvertisingTime;

    public static BFASSBeacon Creater(byte[] rawData) {
        BFASSBeacon beacon = new BFASSBeacon();
        beacon.DeviceName = "BFASS";
        beacon.Building = 0;
        for (int i = 2; i < 6; i++) {
            beacon.Building += rawData[i];
            beacon.Building = beacon.Building << (8 * (5 - i));
        }
        beacon.Room = 0;
        for (int i = 6; i < 10; i++) {
            beacon.Room += rawData[i];
            beacon.Room = beacon.Room << (8 * (9 - i));
        }
        beacon.Extra = 0;
        for (int i = 10; i < 14; i++) {
            beacon.Extra += rawData[i];
            beacon.Extra = beacon.Extra << (8 * (13 - i));
        }
        beacon.LastAdvertisingTime = new Date();
        return beacon;
    }
}

class BFASSBeaconAdapter extends ArrayAdapter<BFASSBeacon> {
    private Context host;

    private int resourceId;

    public BFASSBeaconAdapter(Context context, int resource, List<BFASSBeacon> objects) {
        super(context, resource, objects);
        resourceId = resource;
        host = context;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup container) {
        if (convertView == null) {
            convertView = LayoutInflater.from(host).inflate(resourceId, container, false);
        }
        ((TextView) convertView.findViewById(R.id.S_ITEM_roomid)).setText(getItem(position).Room + "");
        return convertView;
    }
}
